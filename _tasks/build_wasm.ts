// Thanks to Deno std crypto for the approach below

import { runCmd } from "/util/mod.ts";
import * as base64 from "std/encoding/base64.ts";

await runCmd([
  "cargo",
  "build",
  "--release",
  "--target",
  "wasm32-unknown-unknown",
]);

await runCmd([
  "wasm-bindgen",
  "./target/wasm32-unknown-unknown/release/mod.wasm",
  "--target",
  "deno",
  "--weak-refs",
  "--out-dir",
  "./target/wasm32-bindgen-deno-js",
]);

const generatedWasm = await Deno.readFile("./target/wasm32-bindgen-deno-js/mod_bg.wasm");

const formattedWasmSize = generatedWasm.length.toString().padStart(
  Math.ceil(generatedWasm.length.toString().length / 3) * 3,
).replace(/...\B/g, "$&_").trim();

const wasmIntegrity = `sha256-${base64.encode(await crypto.subtle!.digest("SHA-256", generatedWasm))}`;

const wasmJs = `// This file is automatically @generated by _build.ts
// It is not intended for manual editing.
import * as base64 from "std/encoding/base64.ts";
export const size = ${formattedWasmSize};
export const name = "bindings.wasm";
export const type = "application/wasm";
export const hash = ${JSON.stringify(wasmIntegrity)};
export const data = base64.decode("\\\n${base64.encode(generatedWasm).replace(/.{78}/g, "$&\\\n")}\\\n");
export default data;
`;

const generatedScript = await Deno.readTextFile("./target/wasm32-bindgen-deno-js/mod.js");
const bindingsJs = `// This file is automatically @generated by _build.ts
// It is not intended for manual editing.
// deno-lint-ignore-file
import wasmBytes from "./bindings.wasm.js";
${
  generatedScript.replace(
    /^const wasm_url =.*?;\nlet wasmCode =.*?;\n.*?const wasmInstance =.*?;\n/sm,
    `const wasmModule = new WebAssembly.Module(wasmBytes);\n`
      + `const wasmInstance = new WebAssembly.Instance(wasmModule, imports);`,
  )
}
// for testing/debugging
export const _wasm = wasm;
export const _wasmModule = wasmModule;
export const _wasmInstance = wasmInstance;
export const _wasmBytes = wasmBytes;
`;

await Promise.all([
  Deno.writeTextFile("./bindings/bindings.wasm.js", wasmJs),
  Deno.writeTextFile("./bindings/bindings.js", bindingsJs),
  Deno.copyFile("./target/wasm32-bindgen-deno-js/mod.d.ts", "./bindings/bindings.d.ts"),
]);
